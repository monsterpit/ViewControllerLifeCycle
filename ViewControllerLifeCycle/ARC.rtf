{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;\red0\green0\blue233;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;\cssrgb\c0\c0\c93333;
}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ARC "Best link"\
https://krakendev.io/blog/weak-and-unowned-references-in-swift\
"Read its a must from site" and pdf is below too XD\
\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\f1\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ARC\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf2 ARC is a compile time feature that is Apple's version of automated memory management. It stands for 
\i Automatic Reference Counting. 
\i0 This means that it 
\i only
\i0  frees up memory for objects when there are 
\i zero strong
\i0  references to them.\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\b\fs36 \cf2 Strong\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf2 Let's start off with what a strong reference is. It's essentially a normal reference (pointer and all), but it's special in it's own right in that it 
\i protects 
\i0 the referred object from getting deallocated by ARC by increasing it's retain count by 1. In essence, 
\i as long as
\i0  
\i anything
\i0  has a strong reference to an object, it will not be deallocated. This is important to remember for later when I explain retain cycles and stuff.\
Strong references are used almost everywhere in Swift. In fact, the declaration of a property is strong by default! Generally, we are safe to use strong references when the hierarchy relationships of objects are 
\b linear. 
\b0 When a hierarchy of strong references flow from parent to child, then it's always ok to use strong references.\
\pard\pardeftab720\sl560\sa321\partightenfactor0

\b\fs48 \cf2 Weak and Unowned References\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\fs36 \cf2 Weak\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf2 A weak reference is just a pointer to an object that 
\i doesn't protect
\i0  the object from being deallocated by ARC. While strong references increase the retain count of an object by 1, weak references 
\i do not
\i0 . In addition, weak references zero out the pointer to your object when it successfully deallocates. This ensures that when you access a weak reference, it will either be a valid object, or nil.\
In Swift, all weak references are non-constant 
\f2 Optionals
\f1  (think 
\f2 var
\f1  vs. 
\f2 let
\f1 ) because the reference 
\b can
\b0  and 
\b will
\b0  be mutated to nil when there is no longer anything holding a strong reference to it.\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\b\fs36 \cf2 Unowned\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf2 \expnd0\expndtw0\kerning0
If you know your reference is going to be zeroed out properly and your 2 references are 
\i MUTUALLY DEPENDENT
\i0  on each other (one can't live without the other), then you should prefer unowned over weak, since you aren't going to want to have to deal with the overhead of your program trying to unnecessarily zero your reference pointers.\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 Weak and unowned references behave similarly but are NOT the same. Unowned references, like weak references, 
\i do not
\i0  increase the retain count of the object being referred. However, in Swift, an unowned reference has the added benefit of 
\i not being an Optional.\'a0
\i0  This makes them easier to manage rather than resorting to using optional binding. This is not unlike {\field{\*\fldinst{HYPERLINK "http://www.krakendev.io/when-to-use-implicitly-unwrapped-optionals/"}}{\fldrslt \cf3 \ul \ulc3 Implicitly Unwrapped Optionals}} . In addition, unowned references are non-zeroing. This means that when the object is deallocated, it does not zero out the pointer. This means that use of unowned references can, in some cases, lead to {\field{\*\fldinst{HYPERLINK "https://www.blackhat.com/presentations/bh-usa-07/Afek/Whitepaper/bh-usa-07-afek-WP.pdf"}}{\fldrslt \cf3 \ul \ulc3 dangling pointers}}. For you nerds out there that remember the Objective-C days like I do, unowned references map to 
\f2 unsafe_unretained
\f1  references. \
This is where it gets a little confusing. Weak and unowned references both do not increase retain counts. They can both be used to break retain cycles. So when do we use them\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \outl0\strokewidth0 \strokec2 \'93Use a weak reference whenever it is valid for that reference to become nil at some point during its lifetime. Conversely, use an unowned reference when you know that the reference will never be nil once it has been set during initialization.\'94 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 \
\
\
\
Weak and unowned references behave similarly but are NOT the same. Unowned references, like weak references, 
\i do not
\i0  increase the retain count of the object being referred. However, in Swift, an unowned reference has the added benefit of 
\i not being an Optional.\'a0
\i0  This makes them easier to manage rather than resorting to using optional binding. This is not unlike {\field{\*\fldinst{HYPERLINK "http://www.krakendev.io/when-to-use-implicitly-unwrapped-optionals/"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 Implicitly Unwrapped Optionals}} . In addition, unowned references are non-zeroing. This means that when the object is deallocated, it does not zero out the pointer. This means that use of unowned references can, in some cases, lead to {\field{\*\fldinst{HYPERLINK "https://www.blackhat.com/presentations/bh-usa-07/Afek/Whitepaper/bh-usa-07-afek-WP.pdf"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 dangling pointers}}. For you nerds out there that remember the Objective-C days like I do, unowned references map to 
\f2 unsafe_unretained
\f1  references. \
This is where it gets a little confusing. Weak and unowned references both do not increase retain counts. They can both be used to break retain cycles. So when do we use them\
}